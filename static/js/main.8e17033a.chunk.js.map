{"version":3,"sources":["components/layout/Alert.js","components/Pages/About.js","components/Repos/Repo.js","components/Repos/Repos.js","components/Users/SingleUser.js","components/Users/User.js","components/Users/Users.js","App.js","serviceWorker.js","index.js"],"names":["Alert","alert","console","log","Segment","color","inverted","msg","About","Header","as","role","aria-label","Divider","hidden","Repo","repo","List","Item","href","html_url","name","Repos","repos","length","padded","horizontal","map","key","id","SingleUser","getUser","getRepos","user","match","loading","useEffect","params","login","avatar_url","location","bio","blog","company","followers","following","public_repos","public_gists","hireable","basic","Dimmer","active","Loader","Container","Grid","centered","stackable","Column","width","Image","src","Icon","to","Button","User","Card","Content","size","rounded","extra","Users","users","Group","App","useState","setLoading","setUsers","setAlerts","text","setText","setRepos","setUser","setAlert","setTimeout","onSubmit","e","a","preventDefault","axios","get","process","res","data","items","onChange","target","value","clearUsers","username","className","Menu","borderless","header","style","display","exact","path","render","props","very","Row","alignItems","textAlign","Input","focus","placeholder","onClick","primary","secondary","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e17033a.chunk.js","sourcesContent":["import React from 'react';\nimport { Segment } from 'semantic-ui-react';\nconst Alert = (alert) => {\n  console.log(alert);\n  return (\n    alert.alert !== null && (\n      <Segment color={alert.alert.color} inverted>\n        {alert.alert.msg}!!\n      </Segment>\n    )\n  );\n};\nexport default Alert;\n","import React from 'react';\nimport { Header, Divider } from 'semantic-ui-react';\nconst About = () => {\n  return (\n    <div>\n      <Header as='h1'>This app finds and displays Github Profiles.</Header>\n      <Header as='h5'>\n        Made with{' '}\n        <span role='img' aria-label='heart'>\n          ❤️\n        </span>{' '}\n        by Raghu\n      </Header>\n      <Divider hidden></Divider>\n      <Header as='h3'>v1.0.0</Header>\n    </div>\n  );\n};\nexport default About;\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nconst Repo = (repo) => {\n  return (\n    <>\n      <List.Item as='a' href={repo.repo.html_url}>\n        {repo.repo.name}\n      </List.Item>\n    </>\n  );\n};\nexport default Repo;\n","import React from 'react';\nimport { Segment, List, Header, Divider } from 'semantic-ui-react';\nimport Repo from './Repo';\nfunction Repos({ repos }) {\n  console.log(repos.length);\n  return (\n    <div>\n      {repos.length > 0 && (\n        <Segment padded='very'>\n          <Header as='h3'>Public Repos</Header>\n          <List horizontal>\n            {repos.map((repo) => (\n              <Repo key={repo.id} repo={repo} />\n            ))}\n          </List>\n        </Segment>\n      )}\n      <Divider hidden />\n      <Divider hidden />\n    </div>\n  );\n}\n\nexport default Repos;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  Image,\n  Segment,\n  Container,\n  Button,\n  Icon,\n  Header,\n  Divider,\n  Loader,\n  Dimmer,\n} from 'semantic-ui-react';\nimport Repos from '../Repos/Repos';\nimport { Link } from 'react-router-dom';\nconst SingleUser = ({ getUser, getRepos, repos, user, match, loading }) => {\n  useEffect(() => {\n    getUser(match.params.login);\n    getRepos(match.params.login);\n    // eslint-disable-next-line\n  }, []);\n  console.log(repos);\n  const {\n    name,\n    avatar_url,\n    location,\n    bio,\n    blog,\n    login,\n    company,\n    followers,\n    following,\n    public_repos,\n    public_gists,\n    hireable,\n  } = user;\n\n  return loading ? (\n    <Segment basic>\n      <Divider hidden />\n      <Dimmer active inverted>\n        <Loader inverted>Getting that for you!</Loader>\n      </Dimmer>\n    </Segment>\n  ) : (\n    <Container>\n      {name ? (\n        <Header as='h2'>{name}'s profile</Header>\n      ) : (\n        <Header as='h2'>{login}'s profile</Header>\n      )}\n      <Segment padded='very'>\n        <Grid centered stackable>\n          <Grid.Column width={4}>\n            <Image src={avatar_url} />\n          </Grid.Column>\n          <Grid.Column width={7}>\n            <Header as='h4'>\n              Hireable :{' '}\n              {hireable ? (\n                <Icon name='check'></Icon>\n              ) : (\n                <Icon name='close'></Icon>\n              )}\n            </Header>\n            {location && <Header as='h4'>Location: {location}</Header>}\n            {bio && <Header as='h4'>Bio: {bio}</Header>}\n            {blog && <Header as='h4'>Blog: {blog}</Header>}\n            {company && <Header as='h4'>Company: {company}</Header>}\n          </Grid.Column>\n          <Grid.Column width={5}>\n            {public_repos && (\n              <Header as='h4'>Public Repos: {public_repos}</Header>\n            )}\n            {public_gists && (\n              <Header as='h4'>Public Gists: {public_gists}</Header>\n            )}\n            {followers && <Header as='h4'>Followers: {followers}</Header>}\n\n            {following && <Header as='h4'>Following: {following}</Header>}\n          </Grid.Column>\n        </Grid>\n        <Divider hidden></Divider>\n        <Link to='/'>\n          <Button color='black'>Back</Button>\n        </Link>\n      </Segment>\n      <Repos repos={repos} />\n    </Container>\n  );\n};\nexport default SingleUser;\n","import React from 'react';\nimport { Card, Button, Image, Divider } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nconst User = ({ user: { login, avatar_url, html_url } }) => {\n  return (\n    <>\n      <Card>\n        <Card.Content>\n          <Image size='mini' src={avatar_url} rounded />\n          <Divider hidden />\n          <Card.Header>{login}</Card.Header>\n        </Card.Content>\n        <Card.Content extra>\n          {' '}\n          <Link to={`/user/${login}`}>\n            <Button basic color='green'>\n              More\n            </Button>\n          </Link>\n        </Card.Content>\n      </Card>\n    </>\n  );\n};\nexport default User;\n","import React from 'react';\nimport { Segment, Card, Divider, Dimmer, Loader } from 'semantic-ui-react';\nimport User from './User';\nfunction Users({ loading, users, user, getUser }) {\n  return loading ? (\n    <Segment basic>\n      <Divider hidden />\n      <Dimmer active inverted>\n        <Loader inverted>Getting that for you!</Loader>\n      </Dimmer>\n    </Segment>\n  ) : (\n    <Segment basic padded='very'>\n      <Card.Group>\n        {users.map((user) => (\n          <User key={user.id} user={user} />\n        ))}\n      </Card.Group>\n    </Segment>\n  );\n}\n\nexport default Users;\n","import React, { useState, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Alert from './components/layout/Alert';\nimport About from './components/Pages/About';\nimport SingleUser from './components/Users/SingleUser';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport {\n  Segment,\n  Menu,\n  Header,\n  Container,\n  Grid,\n  Input,\n  Icon,\n  Button,\n  Divider,\n} from 'semantic-ui-react';\nimport Users from './components/Users/Users';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [alert, setAlerts] = useState(null);\n  const [text, setText] = useState('');\n  const [repos, setRepos] = useState([]);\n  const [user, setUser] = useState({});\n  const setAlert = (text, color) => {\n    setAlerts({ msg: text, color: color });\n    setTimeout(() => setAlerts(null), 2500);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (text === '') {\n      setAlert('Please Enter Something', 'red');\n    } else {\n      setLoading(true);\n      const res = await axios.get(\n        `https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n      );\n      setUsers(res.data.items);\n\n      setText('');\n      setLoading(false);\n    }\n  };\n\n  const onChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const clearUsers = () => {\n    setUsers([]);\n  };\n\n  const getUser = async (username) => {\n    setLoading(true);\n    const res = await axios.get(\n      `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    setUser(res.data);\n    setLoading(false);\n  };\n  const getRepos = async (username) => {\n    setLoading(true);\n    const res = await axios.get(\n      `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    setRepos(res.data);\n    setLoading(false);\n  };\n\n  return (\n    <Router>\n      <div className='App'>\n        <Container>\n          <Divider hidden />\n          <Menu borderless>\n            <Container>\n              <Menu.Item header>\n                <Header>\n                  <Icon name='github' style={{ display: 'inline' }}></Icon>\n                  Github Finder\n                </Header>\n              </Menu.Item>\n              <Menu.Item>\n                {' '}\n                <Link style={{ color: '#212121' }} to='/'>\n                  Home\n                </Link>\n              </Menu.Item>\n\n              <Menu.Item>\n                {' '}\n                <Link style={{ color: '#212121' }} to='/about'>\n                  About\n                </Link>\n              </Menu.Item>\n            </Container>\n          </Menu>\n        </Container>\n        <Divider hidden></Divider>\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={(props) => (\n              <Fragment>\n                <Container text>\n                  <Segment padded very color='green'>\n                    <Grid>\n                      <Grid.Row style={{ alignItems: 'center' }}>\n                        <Grid.Column textAlign='center'>\n                          <div style={{ display: 'inline-block' }}>\n                            <Header className='ui header'>\n                              <Header>\n                                <span style={{ color: '#1c77c3' }}>\n                                  Welcome!{' '}\n                                </span>\n                              </Header>\n                              Search for a{' '}\n                              <Icon\n                                name='github'\n                                style={{ display: 'inline' }}\n                              ></Icon>\n                              profile\n                            </Header>\n                          </div>\n                          <Divider hidden />\n                          <Input\n                            focus\n                            onChange={onChange}\n                            placeholder='Enter Profile Name'\n                            value={text}\n                          />\n                          <Divider hidden />\n                          <Button onClick={onSubmit} primary>\n                            Search\n                          </Button>\n                          <Button secondary onClick={clearUsers}>\n                            &nbsp;Clear &nbsp;\n                          </Button>\n                          <Divider hidden />\n                          <Alert alert={alert} />\n                        </Grid.Column>\n                      </Grid.Row>\n                    </Grid>\n                  </Segment>\n                  <Users\n                    getUser={getUser}\n                    user={user}\n                    users={users}\n                    loading={loading}\n                  />\n                </Container>\n              </Fragment>\n            )}\n          />\n          <Route exact path='/about' component={About} />\n          <Route\n            exact\n            path='/user/:login'\n            render={(props) => (\n              <SingleUser\n                {...props}\n                getUser={getUser}\n                getRepos={getRepos}\n                user={user}\n                repos={repos}\n                loading={loading}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}